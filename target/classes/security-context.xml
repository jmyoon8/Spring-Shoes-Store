<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
	https://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 주의 : 네임스페이스 security => sec로 수정 -->
	<!-- 정적 리소스 파일들에는 보안 설정을 하지 않음 -->
	<sec:http pattern="/include/**" security="none" />
	<sec:http auto-config="true" use-expressions="true" create-session="never">
		
		<!-- 관리자 영역 설정 -->
		<sec:intercept-url pattern="/manager/**" access="hasRole('ROLE_MANAGER')"/>
		
		<!-- 로그인한 사용자 영역 -->
		<sec:intercept-url pattern="/member/**" access="hasAnyRole('ROLE_MEMBER','ROLE_MANAGER')"/>
		<!-- <sec:intercept-url pattern="/user/**" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN', 'ROLE_GUEST', 'ROLE_MANAGER')" /> -->
		
		<!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
		<sec:intercept-url pattern="/**" access="permitAll" />
	
		<!-- 로그인폼 -->
		<sec:form-login login-page="/store/login" 
			login-processing-url="/loginPro"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			username-parameter="memId" password-parameter="memPwd" />
		<!-- 접근 권한이 없는 경우의 코드 -->
		<sec:access-denied-handler ref="userDeniedHandler"/>
		
		<!-- 
		1.로그인폼에진입(/user/login.do)하게되면 로그인관련 url들은 모두 여기서 처리한다.
		2.xml에서 지정한 url(/user/login_check.do)이 요청되면 자동으로 지정한파라미터를
		3.캐치하여 하단에 지정한 로그인처리 클래스인 UserAuthenticationService으로 보내진다.
		4.UserAuthenticationService클래스에서 제공받은 userid,passwd파라미터를 통해 DB에서 결과를 가져온다
		5.return한 결과가 null일경우 임의로 예외를 발생시켜 userLoginFailureHandler에서 페이지처리
		6.return한결과가 null아닐경우userLoginSuccessHandler에서 페이지처리
		7.로그인한 상태에서 권한이 없는 페이지로 이동하려 할경우 userDeniedHandler 페이지에서 페이지처리
		 -->
		 
		<sec:session-management>
			<!-- max-sessions="1" => 같은 브라우저의 여러 창에서 동시접속 막기 
			     expired-url="/user/login.do" => 세션 만료시 이동할 주소
			     error-if-maximum-exceeNId="true" => 최대 세션 초과시 에러 옵션-->
			<sec:concurrency-control max-sessions="100"
			 	expired-url="/store/main"
			 	error-if-maximum-exceeded="true"
			/>        
		</sec:session-management>
		
	</sec:http>
	
	<bean id="userLoginSuccessHandler" class="mvc.stroe.springStore.service.UserLoginSuccessHandler" />
	<bean id="userLoginFailureHandler" class="mvc.stroe.springStore.service.UserLoginFailureHandler" />
	<bean id="userDeniedHandler" class="mvc.stroe.springStore.service.UserDeniedHandler" />
	
	<!-- 로그인 인증을 처리하는 빈 -->
	<!-- 주의 : 에러 => UserAuthenticationService에서 SqlSessionTemplate을 매개변수 생성자에 주입하면 에러 사라짐  -->
	<bean id="userService" class="mvc.stroe.springStore.service.UserAuthenticationService">
		<constructor-arg name="sqlSession" ref="sqlSession" />
	</bean> 
	
	<!-- 비밀번호 암호화 빈 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- 컨트롤러에서 바로 값을 받아 회원가입 처리하자 -->
</beans>
